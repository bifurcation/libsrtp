use crate::srtp::Error;

const T0: [u32; 256] = [
    u32::from_be(0xc66363a5),
    u32::from_be(0xf87c7c84),
    u32::from_be(0xee777799),
    u32::from_be(0xf67b7b8d),
    u32::from_be(0xfff2f20d),
    u32::from_be(0xd66b6bbd),
    u32::from_be(0xde6f6fb1),
    u32::from_be(0x91c5c554),
    u32::from_be(0x60303050),
    u32::from_be(0x2010103),
    u32::from_be(0xce6767a9),
    u32::from_be(0x562b2b7d),
    u32::from_be(0xe7fefe19),
    u32::from_be(0xb5d7d762),
    u32::from_be(0x4dababe6),
    u32::from_be(0xec76769a),
    u32::from_be(0x8fcaca45),
    u32::from_be(0x1f82829d),
    u32::from_be(0x89c9c940),
    u32::from_be(0xfa7d7d87),
    u32::from_be(0xeffafa15),
    u32::from_be(0xb25959eb),
    u32::from_be(0x8e4747c9),
    u32::from_be(0xfbf0f00b),
    u32::from_be(0x41adadec),
    u32::from_be(0xb3d4d467),
    u32::from_be(0x5fa2a2fd),
    u32::from_be(0x45afafea),
    u32::from_be(0x239c9cbf),
    u32::from_be(0x53a4a4f7),
    u32::from_be(0xe4727296),
    u32::from_be(0x9bc0c05b),
    u32::from_be(0x75b7b7c2),
    u32::from_be(0xe1fdfd1c),
    u32::from_be(0x3d9393ae),
    u32::from_be(0x4c26266a),
    u32::from_be(0x6c36365a),
    u32::from_be(0x7e3f3f41),
    u32::from_be(0xf5f7f702),
    u32::from_be(0x83cccc4f),
    u32::from_be(0x6834345c),
    u32::from_be(0x51a5a5f4),
    u32::from_be(0xd1e5e534),
    u32::from_be(0xf9f1f108),
    u32::from_be(0xe2717193),
    u32::from_be(0xabd8d873),
    u32::from_be(0x62313153),
    u32::from_be(0x2a15153f),
    u32::from_be(0x804040c),
    u32::from_be(0x95c7c752),
    u32::from_be(0x46232365),
    u32::from_be(0x9dc3c35e),
    u32::from_be(0x30181828),
    u32::from_be(0x379696a1),
    u32::from_be(0xa05050f),
    u32::from_be(0x2f9a9ab5),
    u32::from_be(0xe070709),
    u32::from_be(0x24121236),
    u32::from_be(0x1b80809b),
    u32::from_be(0xdfe2e23d),
    u32::from_be(0xcdebeb26),
    u32::from_be(0x4e272769),
    u32::from_be(0x7fb2b2cd),
    u32::from_be(0xea75759f),
    u32::from_be(0x1209091b),
    u32::from_be(0x1d83839e),
    u32::from_be(0x582c2c74),
    u32::from_be(0x341a1a2e),
    u32::from_be(0x361b1b2d),
    u32::from_be(0xdc6e6eb2),
    u32::from_be(0xb45a5aee),
    u32::from_be(0x5ba0a0fb),
    u32::from_be(0xa45252f6),
    u32::from_be(0x763b3b4d),
    u32::from_be(0xb7d6d661),
    u32::from_be(0x7db3b3ce),
    u32::from_be(0x5229297b),
    u32::from_be(0xdde3e33e),
    u32::from_be(0x5e2f2f71),
    u32::from_be(0x13848497),
    u32::from_be(0xa65353f5),
    u32::from_be(0xb9d1d168),
    u32::from_be(0x0),
    u32::from_be(0xc1eded2c),
    u32::from_be(0x40202060),
    u32::from_be(0xe3fcfc1f),
    u32::from_be(0x79b1b1c8),
    u32::from_be(0xb65b5bed),
    u32::from_be(0xd46a6abe),
    u32::from_be(0x8dcbcb46),
    u32::from_be(0x67bebed9),
    u32::from_be(0x7239394b),
    u32::from_be(0x944a4ade),
    u32::from_be(0x984c4cd4),
    u32::from_be(0xb05858e8),
    u32::from_be(0x85cfcf4a),
    u32::from_be(0xbbd0d06b),
    u32::from_be(0xc5efef2a),
    u32::from_be(0x4faaaae5),
    u32::from_be(0xedfbfb16),
    u32::from_be(0x864343c5),
    u32::from_be(0x9a4d4dd7),
    u32::from_be(0x66333355),
    u32::from_be(0x11858594),
    u32::from_be(0x8a4545cf),
    u32::from_be(0xe9f9f910),
    u32::from_be(0x4020206),
    u32::from_be(0xfe7f7f81),
    u32::from_be(0xa05050f0),
    u32::from_be(0x783c3c44),
    u32::from_be(0x259f9fba),
    u32::from_be(0x4ba8a8e3),
    u32::from_be(0xa25151f3),
    u32::from_be(0x5da3a3fe),
    u32::from_be(0x804040c0),
    u32::from_be(0x58f8f8a),
    u32::from_be(0x3f9292ad),
    u32::from_be(0x219d9dbc),
    u32::from_be(0x70383848),
    u32::from_be(0xf1f5f504),
    u32::from_be(0x63bcbcdf),
    u32::from_be(0x77b6b6c1),
    u32::from_be(0xafdada75),
    u32::from_be(0x42212163),
    u32::from_be(0x20101030),
    u32::from_be(0xe5ffff1a),
    u32::from_be(0xfdf3f30e),
    u32::from_be(0xbfd2d26d),
    u32::from_be(0x81cdcd4c),
    u32::from_be(0x180c0c14),
    u32::from_be(0x26131335),
    u32::from_be(0xc3ecec2f),
    u32::from_be(0xbe5f5fe1),
    u32::from_be(0x359797a2),
    u32::from_be(0x884444cc),
    u32::from_be(0x2e171739),
    u32::from_be(0x93c4c457),
    u32::from_be(0x55a7a7f2),
    u32::from_be(0xfc7e7e82),
    u32::from_be(0x7a3d3d47),
    u32::from_be(0xc86464ac),
    u32::from_be(0xba5d5de7),
    u32::from_be(0x3219192b),
    u32::from_be(0xe6737395),
    u32::from_be(0xc06060a0),
    u32::from_be(0x19818198),
    u32::from_be(0x9e4f4fd1),
    u32::from_be(0xa3dcdc7f),
    u32::from_be(0x44222266),
    u32::from_be(0x542a2a7e),
    u32::from_be(0x3b9090ab),
    u32::from_be(0xb888883),
    u32::from_be(0x8c4646ca),
    u32::from_be(0xc7eeee29),
    u32::from_be(0x6bb8b8d3),
    u32::from_be(0x2814143c),
    u32::from_be(0xa7dede79),
    u32::from_be(0xbc5e5ee2),
    u32::from_be(0x160b0b1d),
    u32::from_be(0xaddbdb76),
    u32::from_be(0xdbe0e03b),
    u32::from_be(0x64323256),
    u32::from_be(0x743a3a4e),
    u32::from_be(0x140a0a1e),
    u32::from_be(0x924949db),
    u32::from_be(0xc06060a),
    u32::from_be(0x4824246c),
    u32::from_be(0xb85c5ce4),
    u32::from_be(0x9fc2c25d),
    u32::from_be(0xbdd3d36e),
    u32::from_be(0x43acacef),
    u32::from_be(0xc46262a6),
    u32::from_be(0x399191a8),
    u32::from_be(0x319595a4),
    u32::from_be(0xd3e4e437),
    u32::from_be(0xf279798b),
    u32::from_be(0xd5e7e732),
    u32::from_be(0x8bc8c843),
    u32::from_be(0x6e373759),
    u32::from_be(0xda6d6db7),
    u32::from_be(0x18d8d8c),
    u32::from_be(0xb1d5d564),
    u32::from_be(0x9c4e4ed2),
    u32::from_be(0x49a9a9e0),
    u32::from_be(0xd86c6cb4),
    u32::from_be(0xac5656fa),
    u32::from_be(0xf3f4f407),
    u32::from_be(0xcfeaea25),
    u32::from_be(0xca6565af),
    u32::from_be(0xf47a7a8e),
    u32::from_be(0x47aeaee9),
    u32::from_be(0x10080818),
    u32::from_be(0x6fbabad5),
    u32::from_be(0xf0787888),
    u32::from_be(0x4a25256f),
    u32::from_be(0x5c2e2e72),
    u32::from_be(0x381c1c24),
    u32::from_be(0x57a6a6f1),
    u32::from_be(0x73b4b4c7),
    u32::from_be(0x97c6c651),
    u32::from_be(0xcbe8e823),
    u32::from_be(0xa1dddd7c),
    u32::from_be(0xe874749c),
    u32::from_be(0x3e1f1f21),
    u32::from_be(0x964b4bdd),
    u32::from_be(0x61bdbddc),
    u32::from_be(0xd8b8b86),
    u32::from_be(0xf8a8a85),
    u32::from_be(0xe0707090),
    u32::from_be(0x7c3e3e42),
    u32::from_be(0x71b5b5c4),
    u32::from_be(0xcc6666aa),
    u32::from_be(0x904848d8),
    u32::from_be(0x6030305),
    u32::from_be(0xf7f6f601),
    u32::from_be(0x1c0e0e12),
    u32::from_be(0xc26161a3),
    u32::from_be(0x6a35355f),
    u32::from_be(0xae5757f9),
    u32::from_be(0x69b9b9d0),
    u32::from_be(0x17868691),
    u32::from_be(0x99c1c158),
    u32::from_be(0x3a1d1d27),
    u32::from_be(0x279e9eb9),
    u32::from_be(0xd9e1e138),
    u32::from_be(0xebf8f813),
    u32::from_be(0x2b9898b3),
    u32::from_be(0x22111133),
    u32::from_be(0xd26969bb),
    u32::from_be(0xa9d9d970),
    u32::from_be(0x78e8e89),
    u32::from_be(0x339494a7),
    u32::from_be(0x2d9b9bb6),
    u32::from_be(0x3c1e1e22),
    u32::from_be(0x15878792),
    u32::from_be(0xc9e9e920),
    u32::from_be(0x87cece49),
    u32::from_be(0xaa5555ff),
    u32::from_be(0x50282878),
    u32::from_be(0xa5dfdf7a),
    u32::from_be(0x38c8c8f),
    u32::from_be(0x59a1a1f8),
    u32::from_be(0x9898980),
    u32::from_be(0x1a0d0d17),
    u32::from_be(0x65bfbfda),
    u32::from_be(0xd7e6e631),
    u32::from_be(0x844242c6),
    u32::from_be(0xd06868b8),
    u32::from_be(0x824141c3),
    u32::from_be(0x299999b0),
    u32::from_be(0x5a2d2d77),
    u32::from_be(0x1e0f0f11),
    u32::from_be(0x7bb0b0cb),
    u32::from_be(0xa85454fc),
    u32::from_be(0x6dbbbbd6),
    u32::from_be(0x2c16163a),
];

const T1: [u32; 256] = [
    u32::from_be(0xa5c66363),
    u32::from_be(0x84f87c7c),
    u32::from_be(0x99ee7777),
    u32::from_be(0x8df67b7b),
    u32::from_be(0xdfff2f2),
    u32::from_be(0xbdd66b6b),
    u32::from_be(0xb1de6f6f),
    u32::from_be(0x5491c5c5),
    u32::from_be(0x50603030),
    u32::from_be(0x3020101),
    u32::from_be(0xa9ce6767),
    u32::from_be(0x7d562b2b),
    u32::from_be(0x19e7fefe),
    u32::from_be(0x62b5d7d7),
    u32::from_be(0xe64dabab),
    u32::from_be(0x9aec7676),
    u32::from_be(0x458fcaca),
    u32::from_be(0x9d1f8282),
    u32::from_be(0x4089c9c9),
    u32::from_be(0x87fa7d7d),
    u32::from_be(0x15effafa),
    u32::from_be(0xebb25959),
    u32::from_be(0xc98e4747),
    u32::from_be(0xbfbf0f0),
    u32::from_be(0xec41adad),
    u32::from_be(0x67b3d4d4),
    u32::from_be(0xfd5fa2a2),
    u32::from_be(0xea45afaf),
    u32::from_be(0xbf239c9c),
    u32::from_be(0xf753a4a4),
    u32::from_be(0x96e47272),
    u32::from_be(0x5b9bc0c0),
    u32::from_be(0xc275b7b7),
    u32::from_be(0x1ce1fdfd),
    u32::from_be(0xae3d9393),
    u32::from_be(0x6a4c2626),
    u32::from_be(0x5a6c3636),
    u32::from_be(0x417e3f3f),
    u32::from_be(0x2f5f7f7),
    u32::from_be(0x4f83cccc),
    u32::from_be(0x5c683434),
    u32::from_be(0xf451a5a5),
    u32::from_be(0x34d1e5e5),
    u32::from_be(0x8f9f1f1),
    u32::from_be(0x93e27171),
    u32::from_be(0x73abd8d8),
    u32::from_be(0x53623131),
    u32::from_be(0x3f2a1515),
    u32::from_be(0xc080404),
    u32::from_be(0x5295c7c7),
    u32::from_be(0x65462323),
    u32::from_be(0x5e9dc3c3),
    u32::from_be(0x28301818),
    u32::from_be(0xa1379696),
    u32::from_be(0xf0a0505),
    u32::from_be(0xb52f9a9a),
    u32::from_be(0x90e0707),
    u32::from_be(0x36241212),
    u32::from_be(0x9b1b8080),
    u32::from_be(0x3ddfe2e2),
    u32::from_be(0x26cdebeb),
    u32::from_be(0x694e2727),
    u32::from_be(0xcd7fb2b2),
    u32::from_be(0x9fea7575),
    u32::from_be(0x1b120909),
    u32::from_be(0x9e1d8383),
    u32::from_be(0x74582c2c),
    u32::from_be(0x2e341a1a),
    u32::from_be(0x2d361b1b),
    u32::from_be(0xb2dc6e6e),
    u32::from_be(0xeeb45a5a),
    u32::from_be(0xfb5ba0a0),
    u32::from_be(0xf6a45252),
    u32::from_be(0x4d763b3b),
    u32::from_be(0x61b7d6d6),
    u32::from_be(0xce7db3b3),
    u32::from_be(0x7b522929),
    u32::from_be(0x3edde3e3),
    u32::from_be(0x715e2f2f),
    u32::from_be(0x97138484),
    u32::from_be(0xf5a65353),
    u32::from_be(0x68b9d1d1),
    u32::from_be(0x0),
    u32::from_be(0x2cc1eded),
    u32::from_be(0x60402020),
    u32::from_be(0x1fe3fcfc),
    u32::from_be(0xc879b1b1),
    u32::from_be(0xedb65b5b),
    u32::from_be(0xbed46a6a),
    u32::from_be(0x468dcbcb),
    u32::from_be(0xd967bebe),
    u32::from_be(0x4b723939),
    u32::from_be(0xde944a4a),
    u32::from_be(0xd4984c4c),
    u32::from_be(0xe8b05858),
    u32::from_be(0x4a85cfcf),
    u32::from_be(0x6bbbd0d0),
    u32::from_be(0x2ac5efef),
    u32::from_be(0xe54faaaa),
    u32::from_be(0x16edfbfb),
    u32::from_be(0xc5864343),
    u32::from_be(0xd79a4d4d),
    u32::from_be(0x55663333),
    u32::from_be(0x94118585),
    u32::from_be(0xcf8a4545),
    u32::from_be(0x10e9f9f9),
    u32::from_be(0x6040202),
    u32::from_be(0x81fe7f7f),
    u32::from_be(0xf0a05050),
    u32::from_be(0x44783c3c),
    u32::from_be(0xba259f9f),
    u32::from_be(0xe34ba8a8),
    u32::from_be(0xf3a25151),
    u32::from_be(0xfe5da3a3),
    u32::from_be(0xc0804040),
    u32::from_be(0x8a058f8f),
    u32::from_be(0xad3f9292),
    u32::from_be(0xbc219d9d),
    u32::from_be(0x48703838),
    u32::from_be(0x4f1f5f5),
    u32::from_be(0xdf63bcbc),
    u32::from_be(0xc177b6b6),
    u32::from_be(0x75afdada),
    u32::from_be(0x63422121),
    u32::from_be(0x30201010),
    u32::from_be(0x1ae5ffff),
    u32::from_be(0xefdf3f3),
    u32::from_be(0x6dbfd2d2),
    u32::from_be(0x4c81cdcd),
    u32::from_be(0x14180c0c),
    u32::from_be(0x35261313),
    u32::from_be(0x2fc3ecec),
    u32::from_be(0xe1be5f5f),
    u32::from_be(0xa2359797),
    u32::from_be(0xcc884444),
    u32::from_be(0x392e1717),
    u32::from_be(0x5793c4c4),
    u32::from_be(0xf255a7a7),
    u32::from_be(0x82fc7e7e),
    u32::from_be(0x477a3d3d),
    u32::from_be(0xacc86464),
    u32::from_be(0xe7ba5d5d),
    u32::from_be(0x2b321919),
    u32::from_be(0x95e67373),
    u32::from_be(0xa0c06060),
    u32::from_be(0x98198181),
    u32::from_be(0xd19e4f4f),
    u32::from_be(0x7fa3dcdc),
    u32::from_be(0x66442222),
    u32::from_be(0x7e542a2a),
    u32::from_be(0xab3b9090),
    u32::from_be(0x830b8888),
    u32::from_be(0xca8c4646),
    u32::from_be(0x29c7eeee),
    u32::from_be(0xd36bb8b8),
    u32::from_be(0x3c281414),
    u32::from_be(0x79a7dede),
    u32::from_be(0xe2bc5e5e),
    u32::from_be(0x1d160b0b),
    u32::from_be(0x76addbdb),
    u32::from_be(0x3bdbe0e0),
    u32::from_be(0x56643232),
    u32::from_be(0x4e743a3a),
    u32::from_be(0x1e140a0a),
    u32::from_be(0xdb924949),
    u32::from_be(0xa0c0606),
    u32::from_be(0x6c482424),
    u32::from_be(0xe4b85c5c),
    u32::from_be(0x5d9fc2c2),
    u32::from_be(0x6ebdd3d3),
    u32::from_be(0xef43acac),
    u32::from_be(0xa6c46262),
    u32::from_be(0xa8399191),
    u32::from_be(0xa4319595),
    u32::from_be(0x37d3e4e4),
    u32::from_be(0x8bf27979),
    u32::from_be(0x32d5e7e7),
    u32::from_be(0x438bc8c8),
    u32::from_be(0x596e3737),
    u32::from_be(0xb7da6d6d),
    u32::from_be(0x8c018d8d),
    u32::from_be(0x64b1d5d5),
    u32::from_be(0xd29c4e4e),
    u32::from_be(0xe049a9a9),
    u32::from_be(0xb4d86c6c),
    u32::from_be(0xfaac5656),
    u32::from_be(0x7f3f4f4),
    u32::from_be(0x25cfeaea),
    u32::from_be(0xafca6565),
    u32::from_be(0x8ef47a7a),
    u32::from_be(0xe947aeae),
    u32::from_be(0x18100808),
    u32::from_be(0xd56fbaba),
    u32::from_be(0x88f07878),
    u32::from_be(0x6f4a2525),
    u32::from_be(0x725c2e2e),
    u32::from_be(0x24381c1c),
    u32::from_be(0xf157a6a6),
    u32::from_be(0xc773b4b4),
    u32::from_be(0x5197c6c6),
    u32::from_be(0x23cbe8e8),
    u32::from_be(0x7ca1dddd),
    u32::from_be(0x9ce87474),
    u32::from_be(0x213e1f1f),
    u32::from_be(0xdd964b4b),
    u32::from_be(0xdc61bdbd),
    u32::from_be(0x860d8b8b),
    u32::from_be(0x850f8a8a),
    u32::from_be(0x90e07070),
    u32::from_be(0x427c3e3e),
    u32::from_be(0xc471b5b5),
    u32::from_be(0xaacc6666),
    u32::from_be(0xd8904848),
    u32::from_be(0x5060303),
    u32::from_be(0x1f7f6f6),
    u32::from_be(0x121c0e0e),
    u32::from_be(0xa3c26161),
    u32::from_be(0x5f6a3535),
    u32::from_be(0xf9ae5757),
    u32::from_be(0xd069b9b9),
    u32::from_be(0x91178686),
    u32::from_be(0x5899c1c1),
    u32::from_be(0x273a1d1d),
    u32::from_be(0xb9279e9e),
    u32::from_be(0x38d9e1e1),
    u32::from_be(0x13ebf8f8),
    u32::from_be(0xb32b9898),
    u32::from_be(0x33221111),
    u32::from_be(0xbbd26969),
    u32::from_be(0x70a9d9d9),
    u32::from_be(0x89078e8e),
    u32::from_be(0xa7339494),
    u32::from_be(0xb62d9b9b),
    u32::from_be(0x223c1e1e),
    u32::from_be(0x92158787),
    u32::from_be(0x20c9e9e9),
    u32::from_be(0x4987cece),
    u32::from_be(0xffaa5555),
    u32::from_be(0x78502828),
    u32::from_be(0x7aa5dfdf),
    u32::from_be(0x8f038c8c),
    u32::from_be(0xf859a1a1),
    u32::from_be(0x80098989),
    u32::from_be(0x171a0d0d),
    u32::from_be(0xda65bfbf),
    u32::from_be(0x31d7e6e6),
    u32::from_be(0xc6844242),
    u32::from_be(0xb8d06868),
    u32::from_be(0xc3824141),
    u32::from_be(0xb0299999),
    u32::from_be(0x775a2d2d),
    u32::from_be(0x111e0f0f),
    u32::from_be(0xcb7bb0b0),
    u32::from_be(0xfca85454),
    u32::from_be(0xd66dbbbb),
    u32::from_be(0x3a2c1616),
];

const T2: [u32; 256] = [
    u32::from_be(0x63a5c663),
    u32::from_be(0x7c84f87c),
    u32::from_be(0x7799ee77),
    u32::from_be(0x7b8df67b),
    u32::from_be(0xf20dfff2),
    u32::from_be(0x6bbdd66b),
    u32::from_be(0x6fb1de6f),
    u32::from_be(0xc55491c5),
    u32::from_be(0x30506030),
    u32::from_be(0x1030201),
    u32::from_be(0x67a9ce67),
    u32::from_be(0x2b7d562b),
    u32::from_be(0xfe19e7fe),
    u32::from_be(0xd762b5d7),
    u32::from_be(0xabe64dab),
    u32::from_be(0x769aec76),
    u32::from_be(0xca458fca),
    u32::from_be(0x829d1f82),
    u32::from_be(0xc94089c9),
    u32::from_be(0x7d87fa7d),
    u32::from_be(0xfa15effa),
    u32::from_be(0x59ebb259),
    u32::from_be(0x47c98e47),
    u32::from_be(0xf00bfbf0),
    u32::from_be(0xadec41ad),
    u32::from_be(0xd467b3d4),
    u32::from_be(0xa2fd5fa2),
    u32::from_be(0xafea45af),
    u32::from_be(0x9cbf239c),
    u32::from_be(0xa4f753a4),
    u32::from_be(0x7296e472),
    u32::from_be(0xc05b9bc0),
    u32::from_be(0xb7c275b7),
    u32::from_be(0xfd1ce1fd),
    u32::from_be(0x93ae3d93),
    u32::from_be(0x266a4c26),
    u32::from_be(0x365a6c36),
    u32::from_be(0x3f417e3f),
    u32::from_be(0xf702f5f7),
    u32::from_be(0xcc4f83cc),
    u32::from_be(0x345c6834),
    u32::from_be(0xa5f451a5),
    u32::from_be(0xe534d1e5),
    u32::from_be(0xf108f9f1),
    u32::from_be(0x7193e271),
    u32::from_be(0xd873abd8),
    u32::from_be(0x31536231),
    u32::from_be(0x153f2a15),
    u32::from_be(0x40c0804),
    u32::from_be(0xc75295c7),
    u32::from_be(0x23654623),
    u32::from_be(0xc35e9dc3),
    u32::from_be(0x18283018),
    u32::from_be(0x96a13796),
    u32::from_be(0x50f0a05),
    u32::from_be(0x9ab52f9a),
    u32::from_be(0x7090e07),
    u32::from_be(0x12362412),
    u32::from_be(0x809b1b80),
    u32::from_be(0xe23ddfe2),
    u32::from_be(0xeb26cdeb),
    u32::from_be(0x27694e27),
    u32::from_be(0xb2cd7fb2),
    u32::from_be(0x759fea75),
    u32::from_be(0x91b1209),
    u32::from_be(0x839e1d83),
    u32::from_be(0x2c74582c),
    u32::from_be(0x1a2e341a),
    u32::from_be(0x1b2d361b),
    u32::from_be(0x6eb2dc6e),
    u32::from_be(0x5aeeb45a),
    u32::from_be(0xa0fb5ba0),
    u32::from_be(0x52f6a452),
    u32::from_be(0x3b4d763b),
    u32::from_be(0xd661b7d6),
    u32::from_be(0xb3ce7db3),
    u32::from_be(0x297b5229),
    u32::from_be(0xe33edde3),
    u32::from_be(0x2f715e2f),
    u32::from_be(0x84971384),
    u32::from_be(0x53f5a653),
    u32::from_be(0xd168b9d1),
    u32::from_be(0x0),
    u32::from_be(0xed2cc1ed),
    u32::from_be(0x20604020),
    u32::from_be(0xfc1fe3fc),
    u32::from_be(0xb1c879b1),
    u32::from_be(0x5bedb65b),
    u32::from_be(0x6abed46a),
    u32::from_be(0xcb468dcb),
    u32::from_be(0xbed967be),
    u32::from_be(0x394b7239),
    u32::from_be(0x4ade944a),
    u32::from_be(0x4cd4984c),
    u32::from_be(0x58e8b058),
    u32::from_be(0xcf4a85cf),
    u32::from_be(0xd06bbbd0),
    u32::from_be(0xef2ac5ef),
    u32::from_be(0xaae54faa),
    u32::from_be(0xfb16edfb),
    u32::from_be(0x43c58643),
    u32::from_be(0x4dd79a4d),
    u32::from_be(0x33556633),
    u32::from_be(0x85941185),
    u32::from_be(0x45cf8a45),
    u32::from_be(0xf910e9f9),
    u32::from_be(0x2060402),
    u32::from_be(0x7f81fe7f),
    u32::from_be(0x50f0a050),
    u32::from_be(0x3c44783c),
    u32::from_be(0x9fba259f),
    u32::from_be(0xa8e34ba8),
    u32::from_be(0x51f3a251),
    u32::from_be(0xa3fe5da3),
    u32::from_be(0x40c08040),
    u32::from_be(0x8f8a058f),
    u32::from_be(0x92ad3f92),
    u32::from_be(0x9dbc219d),
    u32::from_be(0x38487038),
    u32::from_be(0xf504f1f5),
    u32::from_be(0xbcdf63bc),
    u32::from_be(0xb6c177b6),
    u32::from_be(0xda75afda),
    u32::from_be(0x21634221),
    u32::from_be(0x10302010),
    u32::from_be(0xff1ae5ff),
    u32::from_be(0xf30efdf3),
    u32::from_be(0xd26dbfd2),
    u32::from_be(0xcd4c81cd),
    u32::from_be(0xc14180c),
    u32::from_be(0x13352613),
    u32::from_be(0xec2fc3ec),
    u32::from_be(0x5fe1be5f),
    u32::from_be(0x97a23597),
    u32::from_be(0x44cc8844),
    u32::from_be(0x17392e17),
    u32::from_be(0xc45793c4),
    u32::from_be(0xa7f255a7),
    u32::from_be(0x7e82fc7e),
    u32::from_be(0x3d477a3d),
    u32::from_be(0x64acc864),
    u32::from_be(0x5de7ba5d),
    u32::from_be(0x192b3219),
    u32::from_be(0x7395e673),
    u32::from_be(0x60a0c060),
    u32::from_be(0x81981981),
    u32::from_be(0x4fd19e4f),
    u32::from_be(0xdc7fa3dc),
    u32::from_be(0x22664422),
    u32::from_be(0x2a7e542a),
    u32::from_be(0x90ab3b90),
    u32::from_be(0x88830b88),
    u32::from_be(0x46ca8c46),
    u32::from_be(0xee29c7ee),
    u32::from_be(0xb8d36bb8),
    u32::from_be(0x143c2814),
    u32::from_be(0xde79a7de),
    u32::from_be(0x5ee2bc5e),
    u32::from_be(0xb1d160b),
    u32::from_be(0xdb76addb),
    u32::from_be(0xe03bdbe0),
    u32::from_be(0x32566432),
    u32::from_be(0x3a4e743a),
    u32::from_be(0xa1e140a),
    u32::from_be(0x49db9249),
    u32::from_be(0x60a0c06),
    u32::from_be(0x246c4824),
    u32::from_be(0x5ce4b85c),
    u32::from_be(0xc25d9fc2),
    u32::from_be(0xd36ebdd3),
    u32::from_be(0xacef43ac),
    u32::from_be(0x62a6c462),
    u32::from_be(0x91a83991),
    u32::from_be(0x95a43195),
    u32::from_be(0xe437d3e4),
    u32::from_be(0x798bf279),
    u32::from_be(0xe732d5e7),
    u32::from_be(0xc8438bc8),
    u32::from_be(0x37596e37),
    u32::from_be(0x6db7da6d),
    u32::from_be(0x8d8c018d),
    u32::from_be(0xd564b1d5),
    u32::from_be(0x4ed29c4e),
    u32::from_be(0xa9e049a9),
    u32::from_be(0x6cb4d86c),
    u32::from_be(0x56faac56),
    u32::from_be(0xf407f3f4),
    u32::from_be(0xea25cfea),
    u32::from_be(0x65afca65),
    u32::from_be(0x7a8ef47a),
    u32::from_be(0xaee947ae),
    u32::from_be(0x8181008),
    u32::from_be(0xbad56fba),
    u32::from_be(0x7888f078),
    u32::from_be(0x256f4a25),
    u32::from_be(0x2e725c2e),
    u32::from_be(0x1c24381c),
    u32::from_be(0xa6f157a6),
    u32::from_be(0xb4c773b4),
    u32::from_be(0xc65197c6),
    u32::from_be(0xe823cbe8),
    u32::from_be(0xdd7ca1dd),
    u32::from_be(0x749ce874),
    u32::from_be(0x1f213e1f),
    u32::from_be(0x4bdd964b),
    u32::from_be(0xbddc61bd),
    u32::from_be(0x8b860d8b),
    u32::from_be(0x8a850f8a),
    u32::from_be(0x7090e070),
    u32::from_be(0x3e427c3e),
    u32::from_be(0xb5c471b5),
    u32::from_be(0x66aacc66),
    u32::from_be(0x48d89048),
    u32::from_be(0x3050603),
    u32::from_be(0xf601f7f6),
    u32::from_be(0xe121c0e),
    u32::from_be(0x61a3c261),
    u32::from_be(0x355f6a35),
    u32::from_be(0x57f9ae57),
    u32::from_be(0xb9d069b9),
    u32::from_be(0x86911786),
    u32::from_be(0xc15899c1),
    u32::from_be(0x1d273a1d),
    u32::from_be(0x9eb9279e),
    u32::from_be(0xe138d9e1),
    u32::from_be(0xf813ebf8),
    u32::from_be(0x98b32b98),
    u32::from_be(0x11332211),
    u32::from_be(0x69bbd269),
    u32::from_be(0xd970a9d9),
    u32::from_be(0x8e89078e),
    u32::from_be(0x94a73394),
    u32::from_be(0x9bb62d9b),
    u32::from_be(0x1e223c1e),
    u32::from_be(0x87921587),
    u32::from_be(0xe920c9e9),
    u32::from_be(0xce4987ce),
    u32::from_be(0x55ffaa55),
    u32::from_be(0x28785028),
    u32::from_be(0xdf7aa5df),
    u32::from_be(0x8c8f038c),
    u32::from_be(0xa1f859a1),
    u32::from_be(0x89800989),
    u32::from_be(0xd171a0d),
    u32::from_be(0xbfda65bf),
    u32::from_be(0xe631d7e6),
    u32::from_be(0x42c68442),
    u32::from_be(0x68b8d068),
    u32::from_be(0x41c38241),
    u32::from_be(0x99b02999),
    u32::from_be(0x2d775a2d),
    u32::from_be(0xf111e0f),
    u32::from_be(0xb0cb7bb0),
    u32::from_be(0x54fca854),
    u32::from_be(0xbbd66dbb),
    u32::from_be(0x163a2c16),
];

const T3: [u32; 256] = [
    u32::from_be(0x6363a5c6),
    u32::from_be(0x7c7c84f8),
    u32::from_be(0x777799ee),
    u32::from_be(0x7b7b8df6),
    u32::from_be(0xf2f20dff),
    u32::from_be(0x6b6bbdd6),
    u32::from_be(0x6f6fb1de),
    u32::from_be(0xc5c55491),
    u32::from_be(0x30305060),
    u32::from_be(0x1010302),
    u32::from_be(0x6767a9ce),
    u32::from_be(0x2b2b7d56),
    u32::from_be(0xfefe19e7),
    u32::from_be(0xd7d762b5),
    u32::from_be(0xababe64d),
    u32::from_be(0x76769aec),
    u32::from_be(0xcaca458f),
    u32::from_be(0x82829d1f),
    u32::from_be(0xc9c94089),
    u32::from_be(0x7d7d87fa),
    u32::from_be(0xfafa15ef),
    u32::from_be(0x5959ebb2),
    u32::from_be(0x4747c98e),
    u32::from_be(0xf0f00bfb),
    u32::from_be(0xadadec41),
    u32::from_be(0xd4d467b3),
    u32::from_be(0xa2a2fd5f),
    u32::from_be(0xafafea45),
    u32::from_be(0x9c9cbf23),
    u32::from_be(0xa4a4f753),
    u32::from_be(0x727296e4),
    u32::from_be(0xc0c05b9b),
    u32::from_be(0xb7b7c275),
    u32::from_be(0xfdfd1ce1),
    u32::from_be(0x9393ae3d),
    u32::from_be(0x26266a4c),
    u32::from_be(0x36365a6c),
    u32::from_be(0x3f3f417e),
    u32::from_be(0xf7f702f5),
    u32::from_be(0xcccc4f83),
    u32::from_be(0x34345c68),
    u32::from_be(0xa5a5f451),
    u32::from_be(0xe5e534d1),
    u32::from_be(0xf1f108f9),
    u32::from_be(0x717193e2),
    u32::from_be(0xd8d873ab),
    u32::from_be(0x31315362),
    u32::from_be(0x15153f2a),
    u32::from_be(0x4040c08),
    u32::from_be(0xc7c75295),
    u32::from_be(0x23236546),
    u32::from_be(0xc3c35e9d),
    u32::from_be(0x18182830),
    u32::from_be(0x9696a137),
    u32::from_be(0x5050f0a),
    u32::from_be(0x9a9ab52f),
    u32::from_be(0x707090e),
    u32::from_be(0x12123624),
    u32::from_be(0x80809b1b),
    u32::from_be(0xe2e23ddf),
    u32::from_be(0xebeb26cd),
    u32::from_be(0x2727694e),
    u32::from_be(0xb2b2cd7f),
    u32::from_be(0x75759fea),
    u32::from_be(0x9091b12),
    u32::from_be(0x83839e1d),
    u32::from_be(0x2c2c7458),
    u32::from_be(0x1a1a2e34),
    u32::from_be(0x1b1b2d36),
    u32::from_be(0x6e6eb2dc),
    u32::from_be(0x5a5aeeb4),
    u32::from_be(0xa0a0fb5b),
    u32::from_be(0x5252f6a4),
    u32::from_be(0x3b3b4d76),
    u32::from_be(0xd6d661b7),
    u32::from_be(0xb3b3ce7d),
    u32::from_be(0x29297b52),
    u32::from_be(0xe3e33edd),
    u32::from_be(0x2f2f715e),
    u32::from_be(0x84849713),
    u32::from_be(0x5353f5a6),
    u32::from_be(0xd1d168b9),
    u32::from_be(0x0),
    u32::from_be(0xeded2cc1),
    u32::from_be(0x20206040),
    u32::from_be(0xfcfc1fe3),
    u32::from_be(0xb1b1c879),
    u32::from_be(0x5b5bedb6),
    u32::from_be(0x6a6abed4),
    u32::from_be(0xcbcb468d),
    u32::from_be(0xbebed967),
    u32::from_be(0x39394b72),
    u32::from_be(0x4a4ade94),
    u32::from_be(0x4c4cd498),
    u32::from_be(0x5858e8b0),
    u32::from_be(0xcfcf4a85),
    u32::from_be(0xd0d06bbb),
    u32::from_be(0xefef2ac5),
    u32::from_be(0xaaaae54f),
    u32::from_be(0xfbfb16ed),
    u32::from_be(0x4343c586),
    u32::from_be(0x4d4dd79a),
    u32::from_be(0x33335566),
    u32::from_be(0x85859411),
    u32::from_be(0x4545cf8a),
    u32::from_be(0xf9f910e9),
    u32::from_be(0x2020604),
    u32::from_be(0x7f7f81fe),
    u32::from_be(0x5050f0a0),
    u32::from_be(0x3c3c4478),
    u32::from_be(0x9f9fba25),
    u32::from_be(0xa8a8e34b),
    u32::from_be(0x5151f3a2),
    u32::from_be(0xa3a3fe5d),
    u32::from_be(0x4040c080),
    u32::from_be(0x8f8f8a05),
    u32::from_be(0x9292ad3f),
    u32::from_be(0x9d9dbc21),
    u32::from_be(0x38384870),
    u32::from_be(0xf5f504f1),
    u32::from_be(0xbcbcdf63),
    u32::from_be(0xb6b6c177),
    u32::from_be(0xdada75af),
    u32::from_be(0x21216342),
    u32::from_be(0x10103020),
    u32::from_be(0xffff1ae5),
    u32::from_be(0xf3f30efd),
    u32::from_be(0xd2d26dbf),
    u32::from_be(0xcdcd4c81),
    u32::from_be(0xc0c1418),
    u32::from_be(0x13133526),
    u32::from_be(0xecec2fc3),
    u32::from_be(0x5f5fe1be),
    u32::from_be(0x9797a235),
    u32::from_be(0x4444cc88),
    u32::from_be(0x1717392e),
    u32::from_be(0xc4c45793),
    u32::from_be(0xa7a7f255),
    u32::from_be(0x7e7e82fc),
    u32::from_be(0x3d3d477a),
    u32::from_be(0x6464acc8),
    u32::from_be(0x5d5de7ba),
    u32::from_be(0x19192b32),
    u32::from_be(0x737395e6),
    u32::from_be(0x6060a0c0),
    u32::from_be(0x81819819),
    u32::from_be(0x4f4fd19e),
    u32::from_be(0xdcdc7fa3),
    u32::from_be(0x22226644),
    u32::from_be(0x2a2a7e54),
    u32::from_be(0x9090ab3b),
    u32::from_be(0x8888830b),
    u32::from_be(0x4646ca8c),
    u32::from_be(0xeeee29c7),
    u32::from_be(0xb8b8d36b),
    u32::from_be(0x14143c28),
    u32::from_be(0xdede79a7),
    u32::from_be(0x5e5ee2bc),
    u32::from_be(0xb0b1d16),
    u32::from_be(0xdbdb76ad),
    u32::from_be(0xe0e03bdb),
    u32::from_be(0x32325664),
    u32::from_be(0x3a3a4e74),
    u32::from_be(0xa0a1e14),
    u32::from_be(0x4949db92),
    u32::from_be(0x6060a0c),
    u32::from_be(0x24246c48),
    u32::from_be(0x5c5ce4b8),
    u32::from_be(0xc2c25d9f),
    u32::from_be(0xd3d36ebd),
    u32::from_be(0xacacef43),
    u32::from_be(0x6262a6c4),
    u32::from_be(0x9191a839),
    u32::from_be(0x9595a431),
    u32::from_be(0xe4e437d3),
    u32::from_be(0x79798bf2),
    u32::from_be(0xe7e732d5),
    u32::from_be(0xc8c8438b),
    u32::from_be(0x3737596e),
    u32::from_be(0x6d6db7da),
    u32::from_be(0x8d8d8c01),
    u32::from_be(0xd5d564b1),
    u32::from_be(0x4e4ed29c),
    u32::from_be(0xa9a9e049),
    u32::from_be(0x6c6cb4d8),
    u32::from_be(0x5656faac),
    u32::from_be(0xf4f407f3),
    u32::from_be(0xeaea25cf),
    u32::from_be(0x6565afca),
    u32::from_be(0x7a7a8ef4),
    u32::from_be(0xaeaee947),
    u32::from_be(0x8081810),
    u32::from_be(0xbabad56f),
    u32::from_be(0x787888f0),
    u32::from_be(0x25256f4a),
    u32::from_be(0x2e2e725c),
    u32::from_be(0x1c1c2438),
    u32::from_be(0xa6a6f157),
    u32::from_be(0xb4b4c773),
    u32::from_be(0xc6c65197),
    u32::from_be(0xe8e823cb),
    u32::from_be(0xdddd7ca1),
    u32::from_be(0x74749ce8),
    u32::from_be(0x1f1f213e),
    u32::from_be(0x4b4bdd96),
    u32::from_be(0xbdbddc61),
    u32::from_be(0x8b8b860d),
    u32::from_be(0x8a8a850f),
    u32::from_be(0x707090e0),
    u32::from_be(0x3e3e427c),
    u32::from_be(0xb5b5c471),
    u32::from_be(0x6666aacc),
    u32::from_be(0x4848d890),
    u32::from_be(0x3030506),
    u32::from_be(0xf6f601f7),
    u32::from_be(0xe0e121c),
    u32::from_be(0x6161a3c2),
    u32::from_be(0x35355f6a),
    u32::from_be(0x5757f9ae),
    u32::from_be(0xb9b9d069),
    u32::from_be(0x86869117),
    u32::from_be(0xc1c15899),
    u32::from_be(0x1d1d273a),
    u32::from_be(0x9e9eb927),
    u32::from_be(0xe1e138d9),
    u32::from_be(0xf8f813eb),
    u32::from_be(0x9898b32b),
    u32::from_be(0x11113322),
    u32::from_be(0x6969bbd2),
    u32::from_be(0xd9d970a9),
    u32::from_be(0x8e8e8907),
    u32::from_be(0x9494a733),
    u32::from_be(0x9b9bb62d),
    u32::from_be(0x1e1e223c),
    u32::from_be(0x87879215),
    u32::from_be(0xe9e920c9),
    u32::from_be(0xcece4987),
    u32::from_be(0x5555ffaa),
    u32::from_be(0x28287850),
    u32::from_be(0xdfdf7aa5),
    u32::from_be(0x8c8c8f03),
    u32::from_be(0xa1a1f859),
    u32::from_be(0x89898009),
    u32::from_be(0xd0d171a),
    u32::from_be(0xbfbfda65),
    u32::from_be(0xe6e631d7),
    u32::from_be(0x4242c684),
    u32::from_be(0x6868b8d0),
    u32::from_be(0x4141c382),
    u32::from_be(0x9999b029),
    u32::from_be(0x2d2d775a),
    u32::from_be(0xf0f111e),
    u32::from_be(0xb0b0cb7b),
    u32::from_be(0x5454fca8),
    u32::from_be(0xbbbbd66d),
    u32::from_be(0x16163a2c),
];

const SBOX: [u8; 256] = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
];

const GF2_8_FIELD_POLYNOMIAL: u8 = 0x1B;

fn gf2_8_shift(z: u8) -> u8 {
    let (z1, _) = z.overflowing_shl(1);
    z1 ^ if z & 0x80 != 0 {
        GF2_8_FIELD_POLYNOMIAL
    } else {
        0
    }
}

#[derive(Clone, Copy)]
pub union V128 {
    v8: [u8; 16],
    v32: [u32; 4],
    v128: u128,
}

impl PartialEq for V128 {
    fn eq(&self, other: &Self) -> bool {
        unsafe { self.v128 == other.v128 }
    }
}

impl Eq for V128 {}

impl V128 {
    fn zero() -> V128 {
        V128 { v128: 0 }
    }

    fn xor_eq(&mut self, other: &V128) {
        unsafe { self.v128 ^= other.v128 };
    }

    fn aes_round(&mut self, round_key: &V128) {
        unsafe {
            // compute the columns of the output square in terms of the octets
            // of state, using the tables T0, T1, T2, T3
            let column0 = T0[self.v8[0] as usize]
                ^ T1[self.v8[5] as usize]
                ^ T2[self.v8[10] as usize]
                ^ T3[self.v8[15] as usize];
            let column1 = T0[self.v8[4] as usize]
                ^ T1[self.v8[9] as usize]
                ^ T2[self.v8[14] as usize]
                ^ T3[self.v8[3] as usize];
            let column2 = T0[self.v8[8] as usize]
                ^ T1[self.v8[13] as usize]
                ^ T2[self.v8[2] as usize]
                ^ T3[self.v8[7] as usize];
            let column3 = T0[self.v8[12] as usize]
                ^ T1[self.v8[1] as usize]
                ^ T2[self.v8[6] as usize]
                ^ T3[self.v8[11] as usize];

            self.v32[0] = column0 ^ round_key.v32[0];
            self.v32[1] = column1 ^ round_key.v32[1];
            self.v32[2] = column2 ^ round_key.v32[2];
            self.v32[3] = column3 ^ round_key.v32[3];
        }
    }

    fn aes_final_round(&mut self, round_key: &V128) {
        unsafe {
            // byte substitutions and row shifts
            // first row - no shift
            self.v8[0] = SBOX[self.v8[0] as usize];
            self.v8[4] = SBOX[self.v8[4] as usize];
            self.v8[8] = SBOX[self.v8[8] as usize];
            self.v8[12] = SBOX[self.v8[12] as usize];

            // second row - shift one left
            let tmp = SBOX[self.v8[1] as usize];
            self.v8[1] = SBOX[self.v8[5] as usize];
            self.v8[5] = SBOX[self.v8[9] as usize];
            self.v8[9] = SBOX[self.v8[13] as usize];
            self.v8[13] = tmp;

            // third row - shift two left
            let tmp = SBOX[self.v8[10] as usize];
            self.v8[10] = SBOX[self.v8[2] as usize];
            self.v8[2] = tmp;
            let tmp = SBOX[self.v8[14] as usize];
            self.v8[14] = SBOX[self.v8[6] as usize];
            self.v8[6] = tmp;

            // fourth row - shift three left
            let tmp = SBOX[self.v8[15] as usize];
            self.v8[15] = SBOX[self.v8[11] as usize];
            self.v8[11] = SBOX[self.v8[7] as usize];
            self.v8[7] = SBOX[self.v8[3] as usize];
            self.v8[3] = tmp;
        }

        self.xor_eq(round_key);
    }
}

#[derive(Debug, Clone, Copy)]
pub enum KeySize {
    Aes128 = 16,
    Aes256 = 32,
}

#[repr(C)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
enum RoundCount {
    Aes128 = 10,
    Aes256 = 14,
}

#[derive(Clone, PartialEq, Eq)]
pub struct EncryptionKey {
    round: [V128; 15],
    num_rounds: RoundCount,
}

impl EncryptionKey {
    fn new_128(key: &[u8]) -> EncryptionKey {
        assert!(key.len() == 16);
        let mut enc = EncryptionKey {
            round: [V128::zero(); 15],
            num_rounds: RoundCount::Aes128,
        };

        let mut rc: u8 = 1;
        unsafe { enc.round[0].v8.copy_from_slice(key) };

        for i in 1..11 {
            unsafe {
                enc.round[i].v8[0] = SBOX[enc.round[i - 1].v8[13] as usize] ^ rc;
                enc.round[i].v8[1] = SBOX[enc.round[i - 1].v8[14] as usize];
                enc.round[i].v8[2] = SBOX[enc.round[i - 1].v8[15] as usize];
                enc.round[i].v8[3] = SBOX[enc.round[i - 1].v8[12] as usize];

                enc.round[i].v32[0] ^= enc.round[i - 1].v32[0];
                enc.round[i].v32[1] = enc.round[i].v32[0] ^ enc.round[i - 1].v32[1];
                enc.round[i].v32[2] = enc.round[i].v32[1] ^ enc.round[i - 1].v32[2];
                enc.round[i].v32[3] = enc.round[i].v32[2] ^ enc.round[i - 1].v32[3];
            }

            rc = gf2_8_shift(rc);
        }

        enc
    }

    fn new_256(key: &[u8]) -> EncryptionKey {
        assert!(key.len() == 32);
        let mut enc = EncryptionKey {
            round: [V128::zero(); 15],
            num_rounds: RoundCount::Aes256,
        };

        let mut rc: u8 = 1;
        unsafe { enc.round[0].v8.copy_from_slice(&key[..16]) };
        unsafe { enc.round[1].v8.copy_from_slice(&key[16..]) };

        for i in 2..15 {
            unsafe {
                if (i & 1) == 0 {
                    enc.round[i].v8[0] = SBOX[enc.round[i - 1].v8[13] as usize] ^ rc;
                    enc.round[i].v8[1] = SBOX[enc.round[i - 1].v8[14] as usize];
                    enc.round[i].v8[2] = SBOX[enc.round[i - 1].v8[15] as usize];
                    enc.round[i].v8[3] = SBOX[enc.round[i - 1].v8[12] as usize];

                    /* modify round constant */
                    rc = gf2_8_shift(rc);
                } else {
                    enc.round[i].v8[0] = SBOX[enc.round[i - 1].v8[12] as usize];
                    enc.round[i].v8[1] = SBOX[enc.round[i - 1].v8[13] as usize];
                    enc.round[i].v8[2] = SBOX[enc.round[i - 1].v8[14] as usize];
                    enc.round[i].v8[3] = SBOX[enc.round[i - 1].v8[15] as usize];
                }

                enc.round[i].v32[0] ^= enc.round[i - 2].v32[0];
                enc.round[i].v32[1] = enc.round[i].v32[0] ^ enc.round[i - 2].v32[1];
                enc.round[i].v32[2] = enc.round[i].v32[1] ^ enc.round[i - 2].v32[2];
                enc.round[i].v32[3] = enc.round[i].v32[2] ^ enc.round[i - 2].v32[3];
            }
        }

        enc
    }

    pub fn new(key: &[u8]) -> Result<EncryptionKey, Error> {
        match key.len() {
            16 => Ok(EncryptionKey::new_128(key)),
            32 => Ok(EncryptionKey::new_256(key)),
            _ => Err(Error::BadParam),
        }
    }

    pub fn encrypt(&self, pt_ext: &mut [u8]) {
        let mut pt = V128::zero();
        unsafe { pt.v8.copy_from_slice(&pt_ext[0..16]) };

        pt.xor_eq(&self.round[0]);

        pt.aes_round(&self.round[1]);
        pt.aes_round(&self.round[2]);
        pt.aes_round(&self.round[3]);
        pt.aes_round(&self.round[4]);
        pt.aes_round(&self.round[5]);
        pt.aes_round(&self.round[6]);
        pt.aes_round(&self.round[7]);
        pt.aes_round(&self.round[8]);
        pt.aes_round(&self.round[9]);
        match &self.num_rounds {
            RoundCount::Aes128 => {
                pt.aes_final_round(&self.round[10]);
            }
            RoundCount::Aes256 => {
                pt.aes_round(&self.round[10]);
                pt.aes_round(&self.round[11]);
                pt.aes_round(&self.round[12]);
                pt.aes_round(&self.round[13]);
                pt.aes_final_round(&self.round[14]);
            }
        }

        unsafe { pt_ext[0..16].copy_from_slice(&pt.v8) };
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_aes() -> Result<(), hex::FromHexError> {
        struct TestCase {
            key: &'static str,
            pt: &'static str,
            ct: &'static str,
        }

        let test_cases: [TestCase; 2] = [
            TestCase {
                key: "000102030405060708090a0b0c0d0e0f",
                pt: "00112233445566778899aabbccddeeff",
                ct: "69c4e0d86a7b0430d8cdb78070b4c55a",
            },
            TestCase {
                key: "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f",
                pt: "00112233445566778899aabbccddeeff",
                ct: "8ea2b7ca516745bfeafc49904b496089",
            },
        ];

        let mut actual_ct: [u8; 16] = [0; 16];
        for tc in &test_cases {
            let key = hex::decode(tc.key)?;
            let pt = hex::decode(tc.pt)?;
            let expected_ct = hex::decode(tc.ct)?;

            let enc = EncryptionKey::new(&key).unwrap();

            actual_ct.copy_from_slice(pt.as_slice());
            enc.encrypt(&mut actual_ct);
            assert_eq!(expected_ct, actual_ct);
        }

        Ok(())
    }
}
