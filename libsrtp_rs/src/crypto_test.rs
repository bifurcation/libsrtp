use crate::crypto_kernel::{
    AuthType, AuthTypeID, CipherType, CipherTypeID, ExtensionCipherType, ExtensionCipherTypeID,
};
use crate::replay::ExtendedSequenceNumber;
use crate::srtp::Error;
use std::ops::Range;

//
// Extension Cipher Tests
//
struct ExtensionCipherTest {
    id: ExtensionCipherTypeID,
    key: &'static [u8],
    salt: &'static [u8],
    ssrc: u32,
    index: ExtendedSequenceNumber,
    ranges: &'static [Range<usize>],
    plaintext: &'static [u8],
    ciphertext: &'static [u8],
}

impl ExtensionCipherTest {
    fn run(&self, xtn_cipher_type: &dyn ExtensionCipherType) -> Result<(), Error> {
        let mut cipher = xtn_cipher_type.xtn_create(self.key, self.salt)?;
        cipher.init(self.ssrc, self.index)?;

        let mut enc_vec = vec![0u8; self.plaintext.len()];
        let enc_buffer = enc_vec.as_mut_slice();
        enc_buffer.copy_from_slice(self.plaintext);
        for r in self.ranges {
            cipher.xor_key(&mut enc_buffer[r.clone()], r.clone())?;
        }
        if enc_buffer != self.ciphertext {
            return Err(Error::AlgoFail);
        }

        Ok(())
    }
}

const XTN_CIPHER_TEST_DATA: &'static [ExtensionCipherTest] = &[
    ExtensionCipherTest {
        id: ExtensionCipherTypeID::Null,
        key: &[],
        salt: &[],
        ssrc: 0,
        index: 0,
        ranges: &[2..5, 7..10, 12..13],
        plaintext: &[
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c,
        ],
        ciphertext: &[
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c,
        ],
    },
    ExtensionCipherTest {
        id: ExtensionCipherTypeID::AesIcm128,
        key: &[
            0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf,
            0x4f, 0x3c,
        ],
        salt: &[
            0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd,
        ],
        ssrc: 0,
        index: 0,
        ranges: &[2..5, 7..10, 12..13],
        plaintext: &[0; 13],
        ciphertext: &[
            0x00, 0x00, 0xad, 0x09, 0x35, 0x00, 0x00, 0x80, 0xe1, 0x66, 0x00, 0x00, 0xd9,
        ],
    },
    ExtensionCipherTest {
        id: ExtensionCipherTypeID::AesIcm192,
        key: &[
            0xea, 0xb2, 0x34, 0x76, 0x4e, 0x51, 0x7b, 0x2d, 0x3d, 0x16, 0x0d, 0x58, 0x7d, 0x8c,
            0x86, 0x21, 0x97, 0x40, 0xf6, 0x5f, 0x99, 0xb6, 0xbc, 0xf7,
        ],
        salt: &[
            0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd,
        ],
        ssrc: 0,
        index: 0,
        ranges: &[2..5, 7..10, 12..13],
        plaintext: &[0; 13],
        ciphertext: &[
            0x00, 0x00, 0x6c, 0xba, 0x46, 0x00, 0x00, 0x8d, 0xc1, 0xb5, 0x00, 0x00, 0x80,
        ],
    },
    ExtensionCipherTest {
        id: ExtensionCipherTypeID::AesIcm256,
        key: &[
            0x57, 0xf8, 0x2f, 0xe3, 0x61, 0x3f, 0xd1, 0x70, 0xa8, 0x5e, 0xc9, 0x3c, 0x40, 0xb1,
            0xf0, 0x92, 0x2e, 0xc4, 0xcb, 0x0d, 0xc0, 0x25, 0xb5, 0x82, 0x72, 0x14, 0x7c, 0xc4,
            0x38, 0x94, 0x4a, 0x98,
        ],
        salt: &[
            0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd,
        ],
        ssrc: 0,
        index: 0,
        ranges: &[2..5, 7..10, 12..13],
        plaintext: &[0; 13],
        ciphertext: &[
            0x00, 0x00, 0xd2, 0x8a, 0x93, 0x00, 0x00, 0x25, 0x11, 0xc6, 0x00, 0x00, 0x8b,
        ],
    },
];

pub fn xtn_cipher(xtn_cipher_type: &dyn ExtensionCipherType) -> Result<usize, Error> {
    let mut tests_passed: usize = 0;
    for test in XTN_CIPHER_TEST_DATA {
        if test.id != xtn_cipher_type.xtn_id() {
            continue;
        }

        test.run(xtn_cipher_type)?;
        tests_passed += 1;
    }

    Ok(tests_passed)
}

//
// Cipher Tests
//
struct CipherTest {
    id: CipherTypeID,
    key: &'static [u8],
    salt: &'static [u8],
    nonce: &'static [u8],
    aad: &'static [u8],
    plaintext: &'static [u8],
    ciphertext: &'static [u8],
}

impl CipherTest {
    fn run(&self, cipher_type: &dyn CipherType) -> Result<(), Error> {
        let mut cipher = cipher_type.create(self.key, self.salt)?;

        let pt_size = self.plaintext.len();
        let ct_size = self.ciphertext.len();

        // TODO Verify nonce formation

        // Encrypt
        let mut enc_vec = vec![0u8; ct_size];
        let enc_buffer = enc_vec.as_mut_slice();
        enc_buffer[..pt_size].copy_from_slice(self.plaintext);
        cipher.set_aad(self.aad)?;
        let enc_len = cipher.encrypt(self.nonce, enc_buffer, pt_size)?;
        if enc_len != ct_size {
            return Err(Error::AlgoFail);
        }
        if enc_buffer != self.ciphertext {
            return Err(Error::AlgoFail);
        }

        // Decrypt
        let mut dec_vec = vec![0u8; ct_size];
        let dec_buffer = dec_vec.as_mut_slice();
        dec_buffer.copy_from_slice(self.ciphertext);
        cipher.set_aad(self.aad)?;
        let dec_len = cipher.decrypt(self.nonce, dec_buffer, ct_size)?;
        if dec_len != pt_size {
            return Err(Error::AlgoFail);
        }
        if &dec_buffer[..pt_size] != self.plaintext {
            return Err(Error::AlgoFail);
        }

        Ok(())
    }
}

const CIPHER_TEST_DATA: &'static [CipherTest] = &[
    CipherTest {
        id: CipherTypeID::Null,
        key: &[],
        salt: &[],
        nonce: &[],
        aad: &[],
        plaintext: &[1, 2, 3, 4],
        ciphertext: &[1, 2, 3, 4],
    },
    CipherTest {
        id: CipherTypeID::AesIcm128,
        key: &[
            0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf,
            0x4f, 0x3c,
        ],
        salt: &[
            0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd,
        ],
        nonce: &[
            0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd,
            0x00, 0x00,
        ],
        aad: &[],
        plaintext: &[0; 32],
        ciphertext: &[
            0xe0, 0x3e, 0xad, 0x09, 0x35, 0xc9, 0x5e, 0x80, 0xe1, 0x66, 0xb1, 0x6d, 0xd9, 0x2b,
            0x4e, 0xb4, 0xd2, 0x35, 0x13, 0x16, 0x2b, 0x02, 0xd0, 0xf7, 0x2a, 0x43, 0xa2, 0xfe,
            0x4a, 0x5f, 0x97, 0xab,
        ],
    },
    CipherTest {
        id: CipherTypeID::AesIcm192,
        key: &[
            0xea, 0xb2, 0x34, 0x76, 0x4e, 0x51, 0x7b, 0x2d, 0x3d, 0x16, 0x0d, 0x58, 0x7d, 0x8c,
            0x86, 0x21, 0x97, 0x40, 0xf6, 0x5f, 0x99, 0xb6, 0xbc, 0xf7,
        ],
        salt: &[
            0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd,
        ],
        nonce: &[
            0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd,
            0x00, 0x00,
        ],
        aad: &[],
        plaintext: &[0; 32],
        ciphertext: &[
            0x35, 0x09, 0x6c, 0xba, 0x46, 0x10, 0x02, 0x8d, 0xc1, 0xb5, 0x75, 0x03, 0x80, 0x4c,
            0xe3, 0x7c, 0x5d, 0xe9, 0x86, 0x29, 0x1d, 0xcc, 0xe1, 0x61, 0xd5, 0x16, 0x5e, 0xc4,
            0x56, 0x8f, 0x5c, 0x9a,
        ],
    },
    CipherTest {
        id: CipherTypeID::AesIcm256,
        key: &[
            0x57, 0xf8, 0x2f, 0xe3, 0x61, 0x3f, 0xd1, 0x70, 0xa8, 0x5e, 0xc9, 0x3c, 0x40, 0xb1,
            0xf0, 0x92, 0x2e, 0xc4, 0xcb, 0x0d, 0xc0, 0x25, 0xb5, 0x82, 0x72, 0x14, 0x7c, 0xc4,
            0x38, 0x94, 0x4a, 0x98,
        ],
        salt: &[
            0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd,
        ],
        nonce: &[
            0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd,
            0x00, 0x00,
        ],
        aad: &[],
        plaintext: &[0; 32],
        ciphertext: &[
            0x92, 0xbd, 0xd2, 0x8a, 0x93, 0xc3, 0xf5, 0x25, 0x11, 0xc6, 0x77, 0xd0, 0x8b, 0x55,
            0x15, 0xa4, 0x9d, 0xa7, 0x1b, 0x23, 0x78, 0xa8, 0x54, 0xf6, 0x70, 0x50, 0x75, 0x6d,
            0xed, 0x16, 0x5b, 0xac,
        ],
    },
    CipherTest {
        id: CipherTypeID::AesGcm128,
        key: &[
            0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c, 0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30,
            0x83, 0x08,
        ],
        salt: &[
            0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c,
        ],
        nonce: &[
            0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad, 0xde, 0xca, 0xf8, 0x88,
        ],
        aad: &[
            0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef, 0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad,
            0xbe, 0xef, 0xab, 0xad, 0xda, 0xd2,
        ],
        plaintext: &[
            0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5, 0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5,
            0x26, 0x9a, 0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda, 0x2e, 0x4c, 0x30, 0x3d,
            0x8a, 0x31, 0x8a, 0x72, 0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53, 0x2f, 0xcf,
            0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25, 0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
            0xba, 0x63, 0x7b, 0x39,
        ],
        ciphertext: &[
            0x42, 0x83, 0x1e, 0xc2, 0x21, 0x77, 0x74, 0x24, 0x4b, 0x72, 0x21, 0xb7, 0x84, 0xd0,
            0xd4, 0x9c, 0xe3, 0xaa, 0x21, 0x2f, 0x2c, 0x02, 0xa4, 0xe0, 0x35, 0xc1, 0x7e, 0x23,
            0x29, 0xac, 0xa1, 0x2e, 0x21, 0xd5, 0x14, 0xb2, 0x54, 0x66, 0x93, 0x1c, 0x7d, 0x8f,
            0x6a, 0x5a, 0xac, 0x84, 0xaa, 0x05, 0x1b, 0xa3, 0x0b, 0x39, 0x6a, 0x0a, 0xac, 0x97,
            0x3d, 0x58, 0xe0, 0x91, 0x5b, 0xc9, 0x4f, 0xbc, 0x32, 0x21, 0xa5, 0xdb, 0x94, 0xfa,
            0xe9, 0x5a, 0xe7, 0x12, 0x1a, 0x47,
        ],
    },
    CipherTest {
        id: CipherTypeID::AesGcm256,
        key: &[
            0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c, 0xa5, 0x59, 0x09, 0xc5, 0x54, 0x66,
            0x93, 0x1c, 0xaf, 0xf5, 0x26, 0x9a, 0x21, 0xd5, 0x14, 0xb2, 0x6d, 0x6a, 0x8f, 0x94,
            0x67, 0x30, 0x83, 0x08,
        ],
        salt: &[
            0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c,
        ],
        nonce: &[
            0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad, 0xde, 0xca, 0xf8, 0x88,
        ],
        aad: &[
            0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef, 0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad,
            0xbe, 0xef, 0xab, 0xad, 0xda, 0xd2,
        ],
        plaintext: &[
            0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5, 0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5,
            0x26, 0x9a, 0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda, 0x2e, 0x4c, 0x30, 0x3d,
            0x8a, 0x31, 0x8a, 0x72, 0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53, 0x2f, 0xcf,
            0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25, 0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
            0xba, 0x63, 0x7b, 0x39,
        ],
        ciphertext: &[
            0x0b, 0x11, 0xcf, 0xaf, 0x68, 0x4d, 0xae, 0x46, 0xc7, 0x90, 0xb8, 0x8e, 0xb7, 0x6a,
            0x76, 0x2a, 0x94, 0x82, 0xca, 0xab, 0x3e, 0x39, 0xd7, 0x86, 0x1b, 0xc7, 0x93, 0xed,
            0x75, 0x7f, 0x23, 0x5a, 0xda, 0xfd, 0xd3, 0xe2, 0x0e, 0x80, 0x87, 0xa9, 0x6d, 0xd7,
            0xe2, 0x6a, 0x7d, 0x5f, 0xb4, 0x80, 0xef, 0xef, 0xc5, 0x29, 0x12, 0xd1, 0xaa, 0x10,
            0x09, 0xc9, 0x86, 0xc1, 0x45, 0xbc, 0x03, 0xe6, 0xe1, 0xac, 0x0a, 0x9f, 0x81, 0xcb,
            0x8e, 0x5b, 0x46, 0x65, 0x63, 0x1d,
        ],
    },
];

pub fn cipher(cipher_type: &dyn CipherType) -> Result<usize, Error> {
    let mut tests_passed: usize = 0;
    for test in CIPHER_TEST_DATA {
        if test.id != cipher_type.id() {
            continue;
        }

        test.run(cipher_type)?;
        tests_passed += 1;
    }

    Ok(tests_passed)
}

//
// Auth Tests
//
const fn tag_size(id: AuthTypeID) -> usize {
    match id {
        AuthTypeID::Null => 0,
        AuthTypeID::HmacSha1 => 20,
    }
}

struct AuthTest {
    id: AuthTypeID,
    key: &'static [u8],
    data: &'static [u8],
    tag: &'static [u8],
}

impl AuthTest {
    fn run(&self, auth_type: &dyn AuthType) -> Result<(), Error> {
        let mut auth = auth_type.create(self.key, self.tag.len())?;
        let mut computed_tag = vec![0u8; tag_size(self.id)];

        // One step
        auth.compute(&self.data, computed_tag.as_mut_slice())?;
        if computed_tag.as_slice() != self.tag {
            return Err(Error::AlgoFail);
        }

        // Two step
        auth.start()?;
        auth.update(&self.data)?;
        auth.compute(&[], computed_tag.as_mut_slice())?;
        if computed_tag.as_slice() != self.tag {
            return Err(Error::AlgoFail);
        }

        Ok(())
    }
}

const AUTH_TEST_DATA: &'static [AuthTest] = &[
    AuthTest {
        id: AuthTypeID::Null,
        key: &[],
        data: &[0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65],
        tag: &[],
    },
    AuthTest {
        id: AuthTypeID::HmacSha1,
        key: &[0x0b; 20],
        data: &[0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65],
        tag: &[
            0xb6, 0x17, 0x31, 0x86, 0x55, 0x05, 0x72, 0x64, 0xe2, 0x8b, 0xc0, 0xb6, 0xfb, 0x37,
            0x8c, 0x8e, 0xf1, 0x46, 0xbe, 0x00,
        ],
    },
];

pub fn auth(auth_type: &dyn AuthType) -> Result<usize, Error> {
    let mut tests_passed: usize = 0;
    for test in AUTH_TEST_DATA {
        if test.id != auth_type.id() {
            continue;
        }

        test.run(auth_type)?;
        tests_passed += 1;
    }

    Ok(tests_passed)
}
